{"version":3,"sources":["webpack:///./node_modules/@plone/volto/src/components/theme/View/EventView.jsx"],"names":["EventTextfieldView","content","Fragment","title","className","description","image","src","scales","thumb","download","floated","text","dangerouslySetInnerHTML","__html","flattenHTMLToAppURL","data","EventView","props","id","Column","width","hasBlocksData","only","blocks_layout","items","slice","display_as"],"mappings":"+PAYA,MAAMA,EAAqB,QAAC,QAAEC,GAAS,SACrC,EAAC,IAAMC,SAAQ,KACZD,EAAQE,OAAS,QAAIC,UAAU,wBAAwBH,EAAQE,OAC/DF,EAAQI,aACP,OAAGD,UAAU,uBAAuBH,EAAQI,aAE7CJ,EAAQK,OACP,EAAC,IAAK,CACJF,UAAU,iBACVG,IAAKN,EAAQK,MAAME,OAAOC,MAAMC,SAChCC,QAAQ,UAGXV,EAAQW,MACP,SACEC,wBAAyB,CACvBC,OAAQC,YAAoBd,EAAQW,KAAKI,SAIhC,EAoFJC,UA3EIC,IACjB,MAAM,QAAEjB,GAAYiB,EAEpB,OACE,SAAKC,GAAG,gBAAgBf,UAAU,wCAChC,EAAC,IAAI,KACH,EAAC,IAAKgB,OAAM,CAACC,MAAO,EAAGjB,UAAU,iBAC9BkB,YAAcrB,GACb,EAAC,IAAiBiB,GAElB,EAAClB,EAAuBkB,IAG5B,EAAC,IAAKE,OAAM,CAACC,MAAO,EAAGjB,UAAU,iBAC/B,EAAC,KAAY,CAACH,QAASA,KAEzB,EAAC,IAAKmB,OAAM,CAACC,MAAO,GAAIE,KAAK,UAC1BD,YAAcrB,GACb,oBACE,EAAC,IAAY,eACPiB,EAAK,CACTjB,QAAO,2BACFA,GAAO,IACVuB,cAAe,CACbC,MAAOP,EAAMjB,QAAQuB,cAAcC,MAAMC,MAAM,EAAG,SAIxD,EAAC,KAAY,CAACzB,QAASA,EAAS0B,WAAW,QAC3C,EAAC,IAAY,eACPT,EAAK,CACTjB,QAAO,2BACFA,GAAO,IACVuB,cAAe,CACbC,MAAOP,EAAMjB,QAAQuB,cAAcC,MAAMC,MAAM,UAMvD,EAAC1B,EAAuBkB,KAI1B,C","file":"static/js/plone-volto-components-theme-View-EventView.28291950.chunk.js","sourcesContent":["/**\n * EventView view component.\n * @module components/theme/View/EventView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { hasBlocksData, flattenHTMLToAppURL } from '@plone/volto/helpers';\nimport { Image, Grid } from 'semantic-ui-react';\nimport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nimport { EventDetails } from '@plone/volto/components';\n\nconst EventTextfieldView = ({ content }) => (\n  <React.Fragment>\n    {content.title && <h1 className=\"documentFirstHeading\">{content.title}</h1>}\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content.image && (\n      <Image\n        className=\"document-image\"\n        src={content.image.scales.thumb.download}\n        floated=\"right\"\n      />\n    )}\n    {content.text && (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: flattenHTMLToAppURL(content.text.data),\n        }}\n      />\n    )}\n  </React.Fragment>\n);\n\n/**\n * EventView view component class.\n * @function EventView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst EventView = (props) => {\n  const { content } = props;\n\n  return (\n    <div id=\"page-document\" className=\"ui container view-wrapper event-view\">\n      <Grid>\n        <Grid.Column width={7} className=\"mobile hidden\">\n          {hasBlocksData(content) ? (\n            <RenderBlocks {...props} />\n          ) : (\n            <EventTextfieldView {...props} />\n          )}\n        </Grid.Column>\n        <Grid.Column width={5} className=\"mobile hidden\">\n          <EventDetails content={content} />\n        </Grid.Column>\n        <Grid.Column width={12} only=\"mobile\">\n          {hasBlocksData(content) ? (\n            <>\n              <RenderBlocks\n                {...props}\n                content={{\n                  ...content,\n                  blocks_layout: {\n                    items: props.content.blocks_layout.items.slice(0, 1),\n                  },\n                }}\n              />\n              <EventDetails content={content} display_as=\"div\" />\n              <RenderBlocks\n                {...props}\n                content={{\n                  ...content,\n                  blocks_layout: {\n                    items: props.content.blocks_layout.items.slice(1),\n                  },\n                }}\n              />\n            </>\n          ) : (\n            <EventTextfieldView {...props} />\n          )}\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEventView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string,\n    }),\n    attendees: PropTypes.arrayOf(PropTypes.string).isRequired,\n    contact_email: PropTypes.string,\n    contact_name: PropTypes.string,\n    contact_phone: PropTypes.string,\n    end: PropTypes.string.isRequired,\n    event_url: PropTypes.string,\n    location: PropTypes.string,\n    open_end: PropTypes.bool,\n    recurrence: PropTypes.any,\n    start: PropTypes.string.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n    whole_day: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default EventView;\n"],"sourceRoot":""}